name: "Release"
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'The release tag. Must follow Rust versioning conventions, e.g. "0.0.0"'
        required: true

env:
  RELEASE_BRANCH_NAME: release/${{ inputs.tag }}

jobs:
  prepare-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          if [[ "${{ inputs.tag }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "OK";
          else
            echo "Invalid tag format. Given: ${{ inputs.tag }}";
            exit 1;
          fi
      - uses: actions/checkout@v3

      - uses: ./.github/actions/init-git-user

      - name: Create the release branch
        run: |
          git checkout -b ${{ env.RELEASE_BRANCH_NAME }}
          git push --set-upstream origin ${{ env.RELEASE_BRANCH_NAME }}

  build:
    needs: prepare-branch
    strategy:
      matrix:
        include:
          - runner: self-hosted
            platform: linux
          - runner: macos-13-xl
            platform: darwin
#          - runner: macos-13-xl
#            platform: darwin-aarch64

    runs-on: ${{ matrix.runner }}
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_BRANCH_NAME }}
      - uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: ./.github/actions/init-git-user

      - uses: webfactory/ssh-agent@v0.6.0
        with:
          ssh-private-key: |
            ${{ secrets.MAMORU_CORE_KEY }}
            ${{ secrets.VALIDATION_CHAIN_KEY }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: "1.76.0"
          target: ${{ matrix.platform == 'darwin' && 'aarch64-apple-darwin' || '' }}

      - uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - if: matrix.platform == 'linux'
        name: Build the binary
        run: |
          echo $(uname -m)
          ARCH=$(uname -m)
          make build-rust-release
          git add -f ./bin/linux-x86_64/mamorurs-cli
          git commit -m "Add 'linux-x86_64' binary"

      - if: matrix.platform == 'darwin'
        name: Build the binary
        run: |
          echo $(uname -m)
          ARCH=$(uname -m)
          make build-rust-release
          git add -f ./bin/darwin-${ARCH}/mamorurs-cli
          git commit -m "Add 'darwin-${ARCH}' binary"

      - if: matrix.platform == 'darwin-aarch64'
        name: Build the binary
        run: |
          echo $(uname -m)
          ARCH=$(uname -m)
          make build-rust-release-macos-aarch64
          git add -f ./bin/darwin-${ARCH}/mamorurs-cli
          git commit -m "Add 'darwin-${ARCH}' binary"

      - if: matrix.platform == 'linux' || matrix.platform == 'darwin'
        name: Run tests
        run: |
          make test

      - name: Push the binary
        run: |
          # Try push 5 times due to possible conflicts from other build jobs
          for i in {1..5}; do
            git pull --rebase && git push && break || sleep 5;
          done

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_BRANCH_NAME }}

      - uses: ./.github/actions/init-git-user

      - name: Create the release tag
        run: |
          git tag -a ${{ inputs.tag }} -m "Release ${{ inputs.tag }}"
          git push origin ${{ inputs.tag }}

      - uses: actions/upload-artifact@v4
        with:
          name: mamorurs-cli-${{ matrix.os }}-${{ matrix.version }}
          path: ./bin/**/mamorurs-cli
